

/* map-view.js */
Exhibit.MapView=function(C,B){Exhibit.MapView._initialize();
this._div=C;
this._uiContext=B;
this._settings={};
this._accessors={getProxy:function(F,E,D){D(F);
},getColorKey:null,getSizeKey:null,getIconKey:null,getIcon:null};
this._colorCoder=null;
this._sizeCoder=null;
this._iconCoder=null;
this._selectListener=null;
this._itemIDToMarker={};
var A=this;
this._listener={onItemsChanged:function(){A._reconstruct();
}};
B.getCollection().addListener(this._listener);
};
Exhibit.MapView._settingSpecs={"center":{type:"float",defaultValue:[20,0],dimensions:2},"zoom":{type:"float",defaultValue:2},"size":{type:"text",defaultValue:"small"},"scaleControl":{type:"boolean",defaultValue:true},"overviewControl":{type:"boolean",defaultValue:false},"type":{type:"enum",defaultValue:"normal",choices:["normal","satellite","hybrid"]},"bubbleTip":{type:"enum",defaultValue:"top",choices:["top","bottom"]},"mapHeight":{type:"int",defaultValue:400},"mapConstructor":{type:"function",defaultValue:null},"color":{type:"text",defaultValue:"#FF9000"},"colorCoder":{type:"text",defaultValue:null},"sizeCoder":{type:"text",defaultValue:null},"iconCoder":{type:"text",defaultValue:null},"selectCoordinator":{type:"text",defaultValue:null},"iconSize":{type:"int",defaultValue:0},"iconFit":{type:"text",defaultValue:"smaller"},"iconScale":{type:"float",defaultValue:1},"iconOffsetX":{type:"float",defaultValue:0},"iconOffsetY":{type:"float",defaultValue:0},"shape":{type:"text",defaultValue:"circle"},"shapeWidth":{type:"int",defaultValue:24},"shapeHeight":{type:"int",defaultValue:24},"shapeAlpha":{type:"float",defaultValue:0.7},"pin":{type:"boolean",defaultValue:true},"pinHeight":{type:"int",defaultValue:6},"pinWidth":{type:"int",defaultValue:6},"sizeLegendLabel":{type:"text",defaultValue:null},"colorLegendLabel":{type:"text",defaultValue:null},"iconLegendLabel":{type:"text",defaultValue:null},"markerScale":{type:"text",defaultValue:null},"showHeader":{type:"boolean",defaultValue:true},"showSummary":{type:"boolean",defaultValue:true},"showFooter":{type:"boolean",defaultValue:true},"showToolbox":{type:"boolean",defaultValue:true}};
Exhibit.MapView._accessorSpecs=[{accessorName:"getProxy",attributeName:"proxy"},{accessorName:"getLatlng",alternatives:[{bindings:[{attributeName:"latlng",types:["float","float"],bindingNames:["lat","lng"]},{attributeName:"maxAutoZoom",type:"float",bindingName:"maxAutoZoom",optional:true}]},{bindings:[{attributeName:"lat",type:"float",bindingName:"lat"},{attributeName:"lng",type:"float",bindingName:"lng"},{attributeName:"maxAutoZoom",type:"float",bindingName:"maxAutoZoom",optional:true}]}]},{accessorName:"getColorKey",attributeName:"marker",type:"text"},{accessorName:"getColorKey",attributeName:"colorKey",type:"text"},{accessorName:"getSizeKey",attributeName:"sizeKey",type:"text"},{accessorName:"getIconKey",attributeName:"iconKey",type:"text"},{accessorName:"getIcon",attributeName:"icon",type:"url"}];
Exhibit.MapView._initialize=function(){var C=[];
var F=document.documentElement.getElementsByTagName("head");
for(var D=0;
D<F.length;
D++){var B=F[D].getElementsByTagName("link");
for(var A=0;
A<B.length;
A++){var E=B[A];
if(E.rel.match(/\bexhibit\/map-painter\b/)){Exhibit.MapView._markerUrlPrefix=E.href+"?";
}}}Exhibit.MapView._initialize=function(){};
};
Exhibit.MapView.create=function(D,C,B){var A=new Exhibit.MapView(C,Exhibit.UIContext.create(D,B));
Exhibit.MapView._configure(A,D);
A._internalValidate();
A._initializeUI();
return A;
};
Exhibit.MapView.createFromDOM=function(D,C,B){var E=Exhibit.getConfigurationFromDOM(D);
var A=new Exhibit.MapView(C!=null?C:D,Exhibit.UIContext.createFromDOM(D,B));
Exhibit.SettingsUtilities.createAccessorsFromDOM(D,Exhibit.MapView._accessorSpecs,A._accessors);
Exhibit.SettingsUtilities.collectSettingsFromDOM(D,Exhibit.MapView._settingSpecs,A._settings);
Exhibit.MapView._configure(A,E);
A._internalValidate();
A._initializeUI();
return A;
};
Exhibit.MapView._configure=function(A,C){Exhibit.SettingsUtilities.createAccessors(C,Exhibit.MapView._accessorSpecs,A._accessors);
Exhibit.SettingsUtilities.collectSettings(C,Exhibit.MapView._settingSpecs,A._settings);
var B=A._accessors;
A._getLatlng=function(F,E,D){B.getProxy(F,E,function(G){B.getLatlng(G,E,D);
});
};
};
Exhibit.MapView.lookupLatLng=function(H,J,B,F,I,G){if(G==undefined){G=4;
}var A=Exhibit.ExpressionParser.parse(J);
var D=[];
H.visit(function(M){var L=A.evaluateSingle({"value":M},{"value":"item"},"value",I).value;
if(L!=null){D.push({item:M,address:L});
}});
var E=[];
var C=new GClientGeocoder();
var K=function(){if(D.length>0){var L=D.shift();
C.getLocations(L.address,function(P){if("Placemark" in P){P.Placemark.sort(function(S,R){return R.AddressDetails.Accuracy-S.AddressDetails.Accuracy;
});
}if("Placemark" in P&&P.Placemark.length>0&&P.Placemark[0].AddressDetails.Accuracy>=G){var M=P.Placemark[0].Point.coordinates;
var Q=M[1];
var O=M[0];
E.push("\t{ id: '"+L.item+"', "+B+": '"+Q+","+O+"' }");
}else{var N=L.address.split(",");
if(N.length==1){E.push("\t{ id: '"+L.item+"' }");
}else{L.address=N.slice(1).join(",").replace(/^\s+/,"");
D.unshift(L);
}}K();
});
}else{F.value=E.join(",\n");
}};
K();
};
Exhibit.MapView.prototype.dispose=function(){this._uiContext.getCollection().removeListener(this._listener);
this._map=null;
if(this._selectListener!=null){this._selectListener.dispose();
this._selectListener=null;
}this._itemIDToMarker={};
if(this._settings.showToolbox){this._toolboxWidget.dispose();
this._toolboxWidget=null;
}this._dom.dispose();
this._dom=null;
this._uiContext.dispose();
this._uiContext=null;
this._div.innerHTML="";
this._div=null;
GUnload();
};
Exhibit.MapView.prototype._internalValidate=function(){var B=this._uiContext.getExhibit();
if(this._accessors.getColorKey!=null){if(this._settings.colorCoder!=null){this._colorCoder=B.getComponent(this._settings.colorCoder);
}if(this._colorCoder==null){this._colorCoder=new Exhibit.DefaultColorCoder(this._uiContext);
}}if(this._accessors.getSizeKey!=null){if(this._settings.sizeCoder!=null){this._sizeCoder=B.getComponent(this._settings.sizeCoder);
if("markerScale" in this._settings){this._sizeCoder._settings.markerScale=this._settings.markerScale;
}}}if(this._accessors.getIconKey!=null){if(this._settings.iconCoder!=null){this._iconCoder=B.getComponent(this._settings.iconCoder);
}}if("selectCoordinator" in this._settings){var C=B.getComponent(this._settings.selectCoordinator);
if(C!=null){var A=this;
this._selectListener=C.addListener(function(D){A._select(D);
});
}}};
Exhibit.MapView.prototype._initializeUI=function(){var A=this;
var C={};
C.colorGradient=(this._colorCoder!=null&&"_gradientPoints" in this._colorCoder);
C.colorMarkerGenerator=this._createColorMarkerGenerator();
C.sizeMarkerGenerator=this._createSizeMarkerGenerator();
C.iconMarkerGenerator=this._createIconMarkerGenerator();
this._div.innerHTML="";
this._dom=Exhibit.ViewUtilities.constructPlottingViewDom(this._div,this._uiContext,this._settings.showSummary&&this._settings.showHeader,{onResize:function(){A._map.checkResize();
}},C);
if(this._settings.showToolbox){this._toolboxWidget=Exhibit.ToolboxWidget.createFromDOM(this._div,this._div,this._uiContext);
}var B=this._dom.plotContainer;
B.style.height=this._settings.mapHeight+"px";
B.className="exhibit-mapView-map";
this._map=this._constructGMap(B);
this._reconstruct();
};
Exhibit.MapView.prototype._constructGMap=function(B){var A=this._settings;
if(A.mapConstructor!=null){return A.mapConstructor(B);
}else{var C=new GMap2(B);
C.enableDoubleClickZoom();
C.enableContinuousZoom();
C.setCenter(new GLatLng(A.center[0],A.center[1]),A.zoom);
C.addControl(A.size=="small"?new GSmallMapControl():new GLargeMapControl());
if(A.overviewControl){C.addControl(new GOverviewMapControl);
}if(A.scaleControl){C.addControl(new GScaleControl());
}C.addControl(new GMapTypeControl());
switch(A.type){case"normal":C.setMapType(G_NORMAL_MAP);
break;
case"satellite":C.setMapType(G_SATELLITE_MAP);
break;
case"hybrid":C.setMapType(G_HYBRID_MAP);
break;
}return C;
}};
Exhibit.MapView.prototype._createColorMarkerGenerator=function(){var A=this._settings.shape;
return function(B){return SimileAjax.Graphics.createTranslucentImage(Exhibit.MapView._markerUrlPrefix+"?renderer=map-marker&shape="+A+"&width=20&height=20&pinHeight=5&background="+B.substr(1),"middle");
};
};
Exhibit.MapView.prototype._createSizeMarkerGenerator=function(){var A=this._settings.shape;
return function(B){return SimileAjax.Graphics.createTranslucentImage(Exhibit.MapView._markerUrlPrefix+"?renderer=map-marker&shape="+A+"&width="+B+"&height="+B+"&pinHeight=0","middle");
};
};
Exhibit.MapView.prototype._createIconMarkerGenerator=function(){return function(A){elmt=document.createElement("img");
elmt.src=A;
elmt.style.verticalAlign="middle";
elmt.style.height="40px";
return elmt;
};
};
Exhibit.MapView.prototype._reconstruct=function(){this._map.clearOverlays();
this._dom.legendWidget.clear();
this._itemIDToMarker={};
var A=this._uiContext.getCollection().countRestrictedItems();
var B=[];
if(A>0){this._rePlotItems(B);
}this._dom.setUnplottableMessage(A,B);
};
Exhibit.MapView.prototype._rePlotItems=function(f){var N=this;
var g=this._uiContext.getCollection();
var L=this._uiContext.getDatabase();
var c=this._settings;
var Q=this._accessors;
var H=g.getRestrictedItems();
var R={};
var E=(this._accessors.getColorKey!=null);
var X=(this._accessors.getSizeKey!=null);
var G=(this._accessors.getIconKey!=null);
var O=(this._accessors.getIcon!=null);
H.visit(function(o){var p=[];
N._getLatlng(o,L,function(n){if(n!=null&&"lat" in n&&"lng" in n){p.push(n);
}});
if(p.length>0){var q=null;
if(E){q=new Exhibit.Set();
Q.getColorKey(o,L,function(n){q.add(n);
});
}var l=null;
if(X){l=new Exhibit.Set();
Q.getSizeKey(o,L,function(n){l.add(n);
});
}var i=null;
if(G){i=new Exhibit.Set();
Q.getIconKey(o,L,function(n){i.add(n);
});
}for(var j=0;
j<p.length;
j++){var m=p[j];
var r=m.lat+","+m.lng;
if(r in R){var k=R[r];
k.items.push(o);
if(E){k.colorKeys.addSet(q);
}if(X){k.sizeKeys.addSet(l);
}if(G){k.iconKeys.addSet(i);
}}else{var k={latlng:m,items:[o]};
if(E){k.colorKeys=q;
}if(X){k.sizeKeys=l;
}if(G){k.iconKeys=i;
}R[r]=k;
}}}else{f.push(o);
}});
var I={mixed:false,missing:false,others:false,keys:new Exhibit.Set()};
var d={mixed:false,missing:false,others:false,keys:new Exhibit.Set()};
var e={mixed:false,missing:false,others:false,keys:new Exhibit.Set()};
var D,F=Infinity;
var P=function(k){var i=k.items.length;
if(!D){D=new GLatLngBounds();
}var n=N._settings.shape;
var m=N._settings.color;
if(E){m=N._colorCoder.translateSet(k.colorKeys,I);
}var j=N._settings.iconSize;
if(X){j=N._sizeCoder.translateSet(k.sizeKeys,d);
}var o=null;
if(i==1){if(O){Q.getIcon(k.items[0],L,function(r){o=r;
});
}}if(G){o=N._iconCoder.translateSet(k.iconKeys,e);
}var o=Exhibit.MapView._makeIcon(n,m,j,i==1?"":i.toString(),o,N._settings);
var q=new GLatLng(k.latlng.lat,k.latlng.lng);
var l=new GMarker(q,o);
if(F>k.latlng.maxAutoZoom){F=k.latlng.maxAutoZoom;
}D.extend(q);
GEvent.addListener(l,"click",function(){l.openInfoWindow(N._createInfoWindow(k.items));
if(N._selectListener!=null){N._selectListener.fire({itemIDs:k.items});
}});
N._map.addOverlay(l);
for(var p=0;
p<k.items.length;
p++){N._itemIDToMarker[k.items[p]]=l;
}};
for(var J in R){P(R[J]);
}if(E){var U=this._dom.legendWidget;
var Y=this._colorCoder;
var K=I.keys.toArray().sort();
if(c.colorLegendLabel!==null){U.addLegendLabel(c.colorLegendLabel,"color");
}if(Y._gradientPoints!=null){var B=this._dom.legendWidget;
B.addGradient(this._colorCoder._gradientPoints);
}else{for(var T=0;
T<K.length;
T++){var h=K[T];
var S=Y.translate(h);
U.addEntry(S,h);
}}if(I.others){U.addEntry(Y.getOthersColor(),Y.getOthersLabel());
}if(I.mixed){U.addEntry(Y.getMixedColor(),Y.getMixedLabel());
}if(I.missing){U.addEntry(Y.getMissingColor(),Y.getMissingLabel());
}}if(X){var U=this._dom.legendWidget;
var b=this._sizeCoder;
var K=d.keys.toArray().sort();
if(c.sizeLegendLabel!==null){U.addLegendLabel(c.sizeLegendLabel,"size");
}if(b._gradientPoints!=null){var W=b._gradientPoints;
var a=(W[W.length-1].value-W[0].value)/5;
K=[];
for(var V=0;
V<6;
V++){K.push(Math.floor(W[0].value+a*V));
}for(var T=0;
T<K.length;
T++){var h=K[T];
var M=b.translate(h);
U.addEntry(M,h,"size");
}}else{for(var T=0;
T<K.length;
T++){var h=K[T];
var M=b.translate(h);
U.addEntry(M,h,"size");
}if(d.others){U.addEntry(b.getOthersSize(),b.getOthersLabel(),"size");
}if(d.mixed){U.addEntry(b.getMixedSize(),b.getMixedLabel(),"size");
}if(d.missing){U.addEntry(b.getMissingSize(),b.getMissingLabel(),"size");
}}}if(G){var U=this._dom.legendWidget;
var C=this._iconCoder;
var K=e.keys.toArray().sort();
if(c.iconLegendLabel!=null){U.addLegendLabel(c.iconLegendLabel,"icon");
}for(var T=0;
T<K.length;
T++){var h=K[T];
var Z=C.translate(h);
U.addEntry(Z,h,"icon");
}if(e.others){U.addEntry(C.getOthersIcon(),C.getOthersLabel(),"icon");
}if(e.mixed){U.addEntry(C.getMixedIcon(),C.getMixedLabel(),"icon");
}if(e.missing){U.addEntry(C.getMissingIcon(),C.getMissingLabel(),"icon");
}}if(D&&typeof c.zoom=="undefined"){var A=Math.max(0,N._map.getBoundsZoomLevel(D)-1);
A=Math.min(A,F,c.maxAutoZoom);
N._map.setZoom(A);
}if(D&&typeof c.center=="undefined"){N._map.setCenter(D.getCenter());
}};
Exhibit.MapView.prototype._select=function(A){var C=A.itemIDs[0];
var B=this._itemIDToMarker[C];
if(B){B.openInfoWindow(this._createInfoWindow([C]));
}};
Exhibit.MapView.prototype._createInfoWindow=function(A){return Exhibit.ViewUtilities.fillBubbleWithItems(null,A,this._uiContext);
};
Exhibit.MapView._iconData=null;
Exhibit.MapView._markerUrlPrefix="http://simile.mit.edu/painter/painter?";
Exhibit.MapView._defaultMarkerShape="circle";
Exhibit.MapView._makeIcon=function(L,H,A,P,K,F){var D=P.length*3;
var G=Math.ceil(F.shapeWidth/2)+D;
var O=F.shapeHeight;
var B=G*2;
var Q=O;
if(A>0){B=A;
G=Math.ceil(A/2);
Q=A;
O=A;
F.pin=false;
}var N=new GIcon();
var E=["renderer=map-marker","shape="+L,"alpha="+F.shapeAlpha,"width="+B,"height="+O,"background="+H.substr(1),"label="+P];
var M=["renderer=map-marker-shadow","shape="+L,"width="+B,"height="+O];
var J=[];
if(K!=null){E.push("icon="+K);
if(F.iconFit!="smaller"){E.push("iconFit="+F.iconFit);
}if(F.iconScale!=1){E.push("iconScale="+F.iconScale);
}if(F.iconOffsetX!=1){E.push("iconX="+F.iconOffsetX);
}if(F.iconOffsetY!=1){E.push("iconY="+F.iconOffsetY);
}}if(F.pin){var I=F.pinHeight;
var C=Math.ceil(F.pinWidth/2);
Q+=I;
J.push("pinHeight="+I);
J.push("pinWidth="+(C*2));
N.iconAnchor=new GPoint(G,Q);
N.imageMap=[0,0,0,O,G-C,O,G,Q,G+C,O,B,O,B,0];
N.shadowSize=new GSize(B*1.5,Q-2);
N.infoWindowAnchor=(F.bubbleTip=="bottom")?new GPoint(G,Q):new GPoint(G,0);
}else{J.push("pin=false");
N.iconAnchor=new GPoint(G,Math.ceil(Q/2));
N.imageMap=[0,0,0,O,B,O,B,0];
N.infoWindowAnchor=new GPoint(G,0);
}N.image=Exhibit.MapView._markerUrlPrefix+E.concat(J).join("&")+"&.png";
if(A==0){N.shadow=Exhibit.MapView._markerUrlPrefix+M.concat(J).join("&")+"&.png";
}N.iconSize=new GSize(B,Q);
N.shadowSize=new GSize(B*1.5,Q-2);
return N;
};


/* vemap-view.js */
Exhibit.VEMapView=function(C,B){this._div=C;
this._uiContext=B;
this._settings={};
this._accessors={getProxy:function(F,E,D){D(F);
},getColorKey:null,getIcon:null};
this._colorCoder=null;
var A=this;
this._listener={onItemsChanged:function(){A._reconstruct();
}};
B.getCollection().addListener(this._listener);
};
Exhibit.VEMapView._id=1;
Exhibit.VEMapView._settingSpecs={"center":{type:"float",defaultValue:[20,0],dimensions:2},"zoom":{type:"float",defaultValue:2},"size":{type:"text",defaultValue:"small"},"scaleControl":{type:"boolean",defaultValue:true},"overviewControl":{type:"boolean",defaultValue:false},"type":{type:"enum",defaultValue:"normal",choices:["normal","satellite","hybrid"]},"bubbleTip":{type:"enum",defaultValue:"top",choices:["top","bottom"]},"mapHeight":{type:"int",defaultValue:400},"mapConstructor":{type:"function",defaultValue:null},"color":{type:"text",defaultValue:"#FF9000"},"colorCoder":{type:"text",defaultValue:null},"iconScale":{type:"float",defaultValue:1},"iconOffsetX":{type:"float",defaultValue:0},"iconOffsetY":{type:"float",defaultValue:0},"shape":{type:"text",defaultValue:"circle"},"bodyWidth":{type:"int",defaultValue:24},"bodyHeight":{type:"int",defaultValue:24},"pin":{type:"boolean",defaultValue:true},"pinHeight":{type:"int",defaultValue:6},"pinWidth":{type:"int",defaultValue:6}};
Exhibit.VEMapView._accessorSpecs=[{accessorName:"getProxy",attributeName:"proxy"},{accessorName:"getLatlng",alternatives:[{bindings:[{attributeName:"latlng",types:["float","float"],bindingNames:["lat","lng"]},{attributeName:"maxAutoZoom",type:"float",bindingName:"maxAutoZoom",optional:true}]},{bindings:[{attributeName:"lat",type:"float",bindingName:"lat"},{attributeName:"lng",type:"float",bindingName:"lng"},{attributeName:"maxAutoZoom",type:"float",bindingName:"maxAutoZoom",optional:true}]}]},{accessorName:"getColorKey",attributeName:"marker",type:"text"},{accessorName:"getColorKey",attributeName:"colorKey",type:"text"},{accessorName:"getIcon",attributeName:"icon",type:"url"}];
Exhibit.VEMapView.create=function(D,C,B){var A=new Exhibit.VEMapView(C,Exhibit.UIContext.create(D,B));
Exhibit.VEMapView._configure(A,D);
A._internalValidate();
A._initializeUI();
return A;
};
Exhibit.VEMapView.createFromDOM=function(D,C,B){var E=Exhibit.getConfigurationFromDOM(D);
var A=new Exhibit.VEMapView(C!=null?C:D,Exhibit.UIContext.createFromDOM(D,B));
Exhibit.SettingsUtilities.createAccessorsFromDOM(D,Exhibit.VEMapView._accessorSpecs,A._accessors);
Exhibit.SettingsUtilities.collectSettingsFromDOM(D,Exhibit.VEMapView._settingSpecs,A._settings);
Exhibit.VEMapView._configure(A,E);
A._internalValidate();
A._initializeUI();
return A;
};
Exhibit.VEMapView._configure=function(A,C){Exhibit.SettingsUtilities.createAccessors(C,Exhibit.VEMapView._accessorSpecs,A._accessors);
Exhibit.SettingsUtilities.collectSettings(C,Exhibit.VEMapView._settingSpecs,A._settings);
var B=A._accessors;
A._getLatlng=function(F,E,D){B.getProxy(F,E,function(G){B.getLatlng(G,E,D);
});
};
};
Exhibit.VEMapView.prototype.dispose=function(){this._uiContext.getCollection().removeListener(this._listener);
this._map=null;
this._toolboxWidget.dispose();
this._toolboxWidget=null;
this._dom.dispose();
this._dom=null;
this._uiContext.dispose();
this._uiContext=null;
this._div.innerHTML="";
this._div=null;
};
Exhibit.VEMapView.prototype._internalValidate=function(){if("getColorKey" in this._accessors){if("colorCoder" in this._settings){this._colorCoder=this._uiContext.getExhibit().getComponent(this._settings.colorCoder);
}if(this._colorCoder==null){this._colorCoder=new Exhibit.DefaultColorCoder(this._uiContext);
}}};
Exhibit.VEMapView.prototype._initializeUI=function(){var A=this;
var C=this._settings;
var D="_gradientPoints" in this._colorCoder?"gradient":{markerGenerator:function(F){var E="square";
return SimileAjax.Graphics.createTranslucentImage(Exhibit.MapView._markerUrlPrefix+"?renderer=map-marker&shape="+Exhibit.MapView._defaultMarkerShape+"&width=20&height=20&pinHeight=0&background="+F.substr(1),"middle");
}};
this._div.innerHTML="";
this._dom=Exhibit.ViewUtilities.constructPlottingViewDom(this._div,this._uiContext,true,{},D);
this._toolboxWidget=Exhibit.ToolboxWidget.createFromDOM(this._div,this._div,this._uiContext);
var B=this._dom.plotContainer;
B.style.height=C.mapHeight+"px";
B.className="exhibit-mapView-map";
B.style.position="relative";
B.id="map-"+Exhibit.VEMapView._id++;
var C=this._settings;
if(C._mapConstructor!=null){this._map=C._mapConstructor(B);
}else{this._map=new VEMap(B.id);
this._map.LoadMap(new VELatLong(C.center[0],C.center[1]),C.zoom);
}this._reconstruct();
};
Exhibit.VEMapView.prototype._reconstruct=function(){var K=this;
var V=this._uiContext.getCollection();
var J=this._uiContext.getDatabase();
var T=this._settings;
var N=this._accessors;
var A=V.countAllItems();
var B=V.countRestrictedItems();
var U=[];
this._map.DeleteAllShapeLayers();
this._dom.legendWidget.clear();
if(B>0){var F=V.getRestrictedItems();
var O={};
var D=(this._accessors.getColorKey!=null);
var L=(this._accessors.getIcon!=null);
F.visit(function(d){var Z=[];
K._getLatlng(d,J,function(e){if(e!=null&&"lat" in e&&"lng" in e){Z.push(e);
}});
if(Z.length>0){var X=null;
if(D){X=new Exhibit.Set();
N.getColorKey(d,J,function(e){X.add(e);
});
}for(var c=0;
c<Z.length;
c++){var a=Z[c];
var Y=a.lat+","+a.lng;
if(Y in O){var b=O[Y];
b.items.push(d);
if(D){b.colorKeys.addSet(X);
}}else{var b={latlng:a,items:[d]};
if(D){b.colorKeys=X;
}O[Y]=b;
}}}else{U.push(d);
}});
var G={mixed:false,missing:false,others:false,keys:new Exhibit.Set()};
var C,E=Infinity;
var M=function(Y){var X=Y.items.length;
var c=K._settings.shape;
var a=K._settings.color;
if(D){a=K._colorCoder.translateSet(Y.colorKeys,G);
}var d=null;
if(X==1){if(L){N.getIcon(Y.items[0],J,function(h){d=h;
});
}}var d=Exhibit.VEMapView._makeIcon(c,a,X==1?"":X.toString(),d,K._settings);
var b=new VEShapeLayer();
var f=new VELatLong(Y.latlng.lat,Y.latlng.lng);
var Z=new VEShape(VEShapeType.Pushpin,f);
var e=Y.items[0];
var g=K._createDescription(Y.items);
Z.SetCustomIcon(d);
Z.SetTitle(e);
Z.SetDescription(g);
Z.SetIconAnchor(f);
K._map.AddShapeLayer(b);
b.AddShape(Z);
};
for(var H in O){M(O[H]);
}if(D){var R=this._dom.legendWidget;
var S=this._colorCoder;
var I=G.keys.toArray().sort();
if(this._colorCoder._gradientPoints!=null){R.addGradient(this._colorCoder._gradientPoints);
}else{for(var Q=0;
Q<I.length;
Q++){var W=I[Q];
var P=S.translate(W);
R.addEntry(P,W);
}}if(G.others){R.addEntry(S.getOthersColor(),S.getOthersLabel());
}if(G.mixed){R.addEntry(S.getMixedColor(),S.getMixedLabel());
}if(G.missing){R.addEntry(S.getMissingColor(),S.getMissingLabel());
}}}this._dom.setUnplottableMessage(B,U);
};
Exhibit.VEMapView.prototype._createDescription=function(B){var C=Exhibit.ViewUtilities.fillBubbleWithItems(null,B,this._uiContext);
var A=document.createElement("div");
A.appendChild(C);
return A.innerHTML;
};
Exhibit.VEMapView._iconData=null;
Exhibit.VEMapView._markerUrlPrefix="http://simile.mit.edu/painter/painter?";
Exhibit.VEMapView._defaultMarkerShape="circle";
Exhibit.VEMapView._makeIcon=function(K,G,M,J,E){var C=M.length*3;
var F=Math.ceil(E.bodyWidth/2)+C;
var N=E.bodyHeight;
var A=F*2;
var O=N;
var L=new VECustomIconSpecification;
var D=["renderer=map-marker","shape="+K,"width="+A,"height="+N,"background="+G.substr(1),"label="+M];
var I=[];
if(J!=null){D.push("icon="+J);
if(E.iconScale!=1){D.push("iconScale="+E.iconScale);
}if(E.iconOffsetX!=1){D.push("iconX="+E.iconOffsetX);
}if(E.iconOffsetY!=1){D.push("iconY="+E.iconOffsetY);
}}if(E.pin){var H=E.pinHeight;
var B=Math.ceil(E.pinWidth/4);
O+=H;
I.push("pinHeight="+H);
I.push("pinWidth="+(B*2));
}else{I.push("pin=false");
}L.TextContent=" ";
L.Image=Exhibit.MapView._markerUrlPrefix+D.concat(I).join("&");
L.ImageHeight=O;
L.ImageWidth=A;
return L;
};
